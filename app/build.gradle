apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
ext.appReleaseDir = ""
ext.IN_JENKINS = true

def loadProperties() {
    def proFile = file("../local.properties")
    Properties p = new Properties()
    proFile.withInputStream { stream ->
        p.load(stream)
    }
    appReleaseDir = p.appReleaseDir
}

loadProperties()

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.jenkinsdemo"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            if (IN_JENKINS.toBoolean()) {
                println("this is a jenkins packaging ...")
            } else {
                println("this is a normal packaging ...")
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            if (IN_JENKINS.toBoolean()) {
                println("this is a jenkins packaging ...")
            } else {
                println("this is a normal packaging ...")
            }
        }
    }

    signingConfigs {
        releaseConfig {
            storeFile file("default.keystore")
            storePassword "123456"
            keyAlias "default"
            keyPassword "123456"
        }
        debugConfig {
            storeFile file("default.keystore")
            storePassword "123456"
            keyAlias "default"
            keyPassword "123456"
        }
    }

    lintOptions {
        abortOnError false
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            //新名字
            def newName
            //输出文件夹
            def outDirectory
            //是否为Jenkins打包，输出路径不同
            if (IN_JENKINS.toBoolean()) {
                //BUILD_PATH为服务器输出路径
                outDirectory = appReleaseDir
                newName = "test" + "-" + defaultConfig.versionName + ".apk"
            } else {
                outDirectory = output.outputFile.getParent()
                newName = "test" + "-" + defaultConfig.versionName + ".apk"
            }
            variant.getPackageApplicationProvider().get().outputDirectory = new File(outDirectory, newName)
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
